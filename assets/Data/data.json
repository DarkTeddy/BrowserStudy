[
    {
        "part": "1",
        "title": "宏观视角上的浏览器",
        "children": [
            {
                "lesson": "01",
                "title": "Chrome架构：仅仅打开了1个页面,为什么有四个进程",
                "children": [
                    {
                        "content": [
                            {
                                "type": "text",
                                "text": "在开始之前,我们一起看下,Chrome打开一个页面需要启动多少进程?你可以点击Chrome浏览器右上角的“选项”菜单,选择“更多工具”子菜单,点击“任务管理器”,这将打开Chrome的任务管理器的窗口,如下图"
                            },
                            {
                                "type": "img",
                                "src": "/assets/Img/lesson01/Chrome任务管理器.webp",
                                "alt": "Chrome任务管理器"
                            },
                            {
                                "type": "text",
                                "text": "和Windows任务管理器一样,Chrome任务管理器也是用来展示运行中Chrome使用的进程信息的。从图中可以看到,Chrome启动了4个进程,你也许会好奇,只是打开了1个页面,为什么要启动这么多进程呢?"
                            },
                            {
                                "type": "text",
                                "text": "在解答这个问题之前,我们需要了解一下进程的概念,不过由于好多人容易把进程和线程的概念混淆,从而影响后续其他概念的理解,所以这里我就将这两个概念以及它们之间的关系一并为你讲解下。"
                            }
                        ]
                    },
                    {
                        "title": "进程和线程",
                        "children": [
                            {
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "不过,在介绍进程和线程之前,我需要先讲解下什么是并行处理,因为如果你理解了并行处理的概念,那么再理解进程和线程之间的关系就会变得轻松许多。"
                                    }
                                ]
                            },
                            {
                                "title": "什么是并行处理",
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "计算机中的并行处理就是同一时刻处理多个任务,比如我们要计算下面这三个表达式的值,并显示出结果"
                                    },
                                    {
                                        "type": "text",
                                        "text": "<h1>这里会嵌入代码块</h1><code></code>"
                                    },
                                    {
                                        "type": "text",
                                        "text": "在编写代码的时候,我们可以把这个过程拆分为四个任务："
                                    },
                                    {
                                        "type": "list",
                                        "items": [
                                            {
                                                "type": "text",
                                                "text": "任务1 是计算A=1+2；"
                                            },
                                            {
                                                "type": "text",
                                                "text": "任务2 是计算B=20/5；"
                                            },
                                            {
                                                "type": "text",
                                                "text": "任务3 是计算C=7*8；"
                                            },
                                            {
                                                "type": "text",
                                                "text": "任务4 是显示最后计算的结果"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "text",
                                        "text": "正常情况下程序可以使用单线程来处理,也就是分四步按照顺序分别执行这四个任务。"
                                    },
                                    {
                                        "type": "text",
                                        "text": "如果采用多线程,会怎么样呢?我们只需分“两步走”：第一步,使用三个线程同时执行前三个任务；第二步,再执行第四个显示任务。"
                                    },
                                    {
                                        "type": "text",
                                        "text": "通过对比分析,你会发现用单线程执行需要四步,而使用多线程只需要两步。因此,使用并行处理能大大提升性能"
                                    }
                                ]
                            },
                            {
                                "title": "线程 VS 进程",
                                "children":[
                                    {
                                        "content": [
                                            {
                                                "type":"text",
                                                "text": "多线程可以并行处理任务,但是线程是不能单独存在的,它是由进程来启动和管理的。那什么又是进程呢?"
                                            },
                                            {
                                                "type":"text",
                                                "text": "一个进程就是一个程序的运行实例。详细解释就是,启动一个程序的时候,操作系统会为该程序创建一块内存,用来存放代码、运行中的数据和一个执行任务的主线程,我们把这样的一个运行环境叫进程。"
                                            },
                                            {
                                                "type":"text",
                                                "text": "为了让你更好地理解上述计算过程,我画了下面这张对比图,"
                                            },
                                            {
                                                "type": "img",
                                                "src": "/assets/Img/lesson01/进程运行图.webp",
                                                "alt": "进程运行图"
                                            },
                                            {
                                                "type":"text",
                                                "text": "从图中可以看到,线程是依附于进程的,而进程中使用多线程并行处理能提升运算效率。"
                                            },
                                            {
                                                "type":"text",
                                                "text": "总结来说,进程和线程之间的关系有以下4个特点"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "1. 进程中的任意一线程执行出错,都会导致整个进程的崩溃。",
                                        "content": [
                                            {
                                                "type": "text",
                                                "text": "我们可以模拟以下场景："
                                            },
                                            {
                                                "type": "text",
                                                "text": "<h1>这里会嵌入代码块</h1><code></code>"
                                            },
                                            {
                                                "type": "text",
                                                "text": "我把上述三个表达式稍作修改,在计算B的值的时候,我把表达式的分母改成0,当线程执行到B = 20/0时,由于分母为0,线程会执行出错,这样就会导致整个进程的崩溃,当然另外两个线程执行的结果也没有了"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "2. 线程之间共享进程中的数据。",
                                        "content": [
                                            {
                                                "type": "text",
                                                "text": "如下图所示,线程之间可以对进程的公共数据进行读写操作。"
                                            },
                                            {
                                                "type": "img",
                                                "src": "/assets/Img/lesson01/线程共享数据.webp",
                                                "alt": "线程共享数据"
                                            },
                                            {
                                                "type": "text",
                                                "text": "从上图可以看出,线程1、线程2、线程3分别把执行的结果写入A、B、C中,然后线程2继续从A、B、C中读取数据,用来显示执行结果。"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "3. 当一个进程关闭之后,操作系统会回收进程所占用的内存。",
                                        "content": [
                                            {
                                                "type": "text",
                                                "text": "当一个进程退出时,操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏,当进程退出时,这些内存也会被正确回收。"
                                            },
                                            {
                                                "type": "text",
                                                "text": "比如之前的IE浏览器,支持很多插件,而这些插件很容易导致内存泄漏,这意味着只要浏览器开着,内存占用就有可能会越来越多,但是当关闭浏览器进程时,这些内存就都会被系统回收掉"
                                            }
                                        ]
                                    },
                                    {
                                        "title": "4. 进程之间的内容相互隔离。",
                                        "content": [
                                            {
                                                "type": "text",
                                                "text": "进程隔离是为保护操作系统中进程互不干扰的技术,每一个进程只能访问自己占有的数据,也就避免出现进程A写入数据到进程B的情况。正是因为进程之间的数据是严格隔离的,所以一个进程如果崩溃了,或者挂起了,是不会影响到其他进程的。如果进程之间需要进行数据的通信,这时候,就需要使用用于进程间通信（IPC）的机制了。"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "单进程浏览器时代",
                        "children": [
                            {
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "在了解了进程和线程之后,我们再来一起看下单进程浏览器的架构。顾名思义,单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里,这些模块包含了网络、插件、JavaScript运行环境、渲染引擎和页面等。其实早在2007年之前,市面上浏览器都是单进程的。单进程浏览器的架构如下图所示"
                                    },
                                    {
                                        "type": "img",
                                        "src": "/assets/Img/lesson01/单进程浏览器运行.webp",
                                        "alt": "单进程浏览器运行"
                                    }
                                ]
                            },
                            {
                                "title": "问题1：不稳定",
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "早期浏览器需要借助于插件来实现诸如Web视频、Web游戏等各种强大的功能,但是插件是最容易出问题的模块,并且还运行在浏览器进程之中,所以一个插件的意外崩溃会引起整个浏览器的崩溃。"
                                    },
                                    {
                                        "type": "text",
                                        "text": "除了插件之外,渲染引擎模块也是不稳定的,通常一些复杂的JavaScript代码就有可能引起渲染引擎模块的崩溃。和插件一样,渲染引擎的崩溃也会导致整个浏览器的崩溃"
                                    }
                                ]
                            },
                            {
                                "title": "问题2：不流畅",
                                "content": [
                                    {
                                        "type":"text",
                                        "text": "从上面的“单进程浏览器架构示意图”可以看出,所有页面的渲染模块、JavaScript执行环境以及插件都是运行在同一个线程中的,这就意味着同一时刻只能有一个模块可以执行。"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    }
]